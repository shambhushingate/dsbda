
import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class count_mapper extends Mapper<Object, Text, Text, IntWritable>{
	
	public void map(Object offset, Text key, Context con) throws IOException, InterruptedException{
		String line = key.toString();
		String [] words = line.split(" ");
		for(String word: words) {
			Text outputKey = new Text(word);
			IntWritable outputValue = new IntWritable(1);
			con.write(outputKey,  outputValue);
		}
	}

}



import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class count_reducer extends Reducer<Text, IntWritable, Text, IntWritable>{

	public void reduce(Text word, Iterable<IntWritable> values, Context con) throws IOException, InterruptedException{
		int sum = 0;
		for (IntWritable value: values) {
			sum += value.get();
		}
		con.write(word,  new IntWritable(sum));
	}
}


import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class count_driver {

	public static void main(String[] args) throws IOException , InterruptedException , ClassNotFoundException{
		Configuration c = new Configuration();
		@SuppressWarnings("deprecation")
		Job job = new Job(c, "WordCount");
		job.setJarByClass(count_driver.class);
		job.setMapperClass(count_mapper.class);
		job.setReducerClass(count_reducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		System.exit(job.waitForCompletion(true)?0:1);
	}

}


